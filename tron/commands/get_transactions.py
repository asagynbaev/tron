import httpx
from datetime import datetime
from decouple import config

APPROXIMATE_MAX_TRANSACTIONS_AMOUNT = int(config('APPROXIMATE_MAX_TRANSACTIONS_AMOUNT'))


async def get_transactions(address, api_key, params={}):
    url = f"https://api.trongrid.io/v1/accounts/{address}/transactions/trc20"
    
    headers = {
        'Content-Type': "application/json",
        'TRON-PRO-API-KEY': api_key
    }

    try:
        response = httpx.get(url, headers=headers, params=params)

        # **üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º `.json()`**
        if response.status_code == 400:
            print(f"‚ùå –û—à–∏–±–∫–∞ 400: –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API. –ê–¥—Ä–µ—Å: {address}")
            return None  # –í–µ—Ä–Ω–µ–º `None`, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ `inner()`
        elif response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None

        response_json = response.json()

        # **üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'data' –≤ JSON**
        if 'data' not in response_json or not response_json['data']:
            print(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {address} –Ω–æ–≤—ã–π –∏–ª–∏ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return []  # –í–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

        data = []

        def format_transactions(response_data):
            for transaction in response_data:
                if transaction.get('token_info', {}).get('symbol') == 'USDT':
                    time = datetime.fromtimestamp(transaction['block_timestamp']/1000)
                    data.append({
                        'transaction_id': transaction['transaction_id'],
                        'from': transaction['from'],
                        'to': transaction['to'],
                        'value': transaction['value'],
                        'timestamp': transaction['block_timestamp'],
                        'time': time.strftime("%Y-%m-%d %H:%M:%S"),
                    })

        format_transactions(response_json['data'])

        # **üöÄ –¶–∏–∫–ª –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å fingerprint)**
        while len(data) < APPROXIMATE_MAX_TRANSACTIONS_AMOUNT:
            fingerprint = response_json.get('meta', {}).get('fingerprint')
            if not fingerprint:
                break  # –ï—Å–ª–∏ fingerprint –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

            params['fingerprint'] = fingerprint
            response = httpx.get(url, headers=headers, params=params)

            # **üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ `json()`**
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                break

            response_json = response.json()

            if 'data' in response_json:
                format_transactions(response_json['data'])
            else:
                break

        return data

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return None  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–µ—Ä–Ω–µ–º `None`